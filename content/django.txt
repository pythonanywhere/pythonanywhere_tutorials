=================================================================================
Creating a new Django project on Python Anywhere
=================================================================================

So you want to create a web application but you don't really want to do all the
faffing around that is involved in setting up and configuring web servers?

Well that is one of the reasons we created Python Anywhere. This tutorial will
take you through the process of creating a working Django site with an admin
interface and a front page that tells you the time.

To follow along with this tutorial you will need a
`Python Anywhere <http://www.pythonanywhere.com/>`_
account. Go and sign up if you don't already have one then come back here.

At the end of the tutorial, there's also an overview of the
"manual config / existing apps" button, which you can use if you already know
Django, and you have already coded up a web app which you want to
use on PythonAnywhere.com.


.. contents:: Table of Contents

Tutorial: Setting up a new Django app on Pythonanywhere
=================================================================================

Quickstarting a new project, using the big pony button
---------------------------------------------------------------------------------

Log into PythonAnywhere, got the the **Web** tab, and click on the big
"New Django App" button:

.. image:: static/django/new_django_button.png

This will bring up a menu - feel free to change the *Project Name* to something
more descriptive.  The default *Directory* is fine, or if you prefer you
can put the app into your Dropbox - but you'll need to have set up a shared
Dropbox folder already.  There's more info on that in the **Files** tab on
your dashboard

Click the **Next** button, and a very basic app will be up and running!  Just
click the url to go see it - you should see the default "Welcome to Django"
page.

Creating an app inside the Django project
---------------------------------------------------------------------------------

Django suggest that you structure your sites as *projects* which contain one or
more *apps* - the idea is that you can re-use an app in different projects.

Let's create our first app inside your project. In order to do this you start a
*Bash Console* -- you can do this from the **Web** tab on the dashboard.

In the console, enter the following commands:

::

    cd mysite
    ./manage.py startapp myapp

(replace ``mysite`` with the name of your project, if you chose a different one)

If you do an ``ls``, you'll see that Django has created a new folder called
myapp inside your project.

We'll need this console again later, so why not keep it open for now, and proceed
with the rest of the tutorial in a different tab.


Configuring the database and enabling the admin interface
---------------------------------------------------------------------------------

Django needs a database connection to do pretty much anything. Python Anywhere
provides support for MySQL databases but for now we will just use ``sqlite3``,
a file based database that does not require setting up a database account and
password.

The file that contains all the settings information for Django is called,
naturally enough, ``settings.py``. By default it lives in your Django project
directory.

Go to the **Files** tab on your dashboard, find your project folder, and then
find ``settings.py`` inside it.

We will need to change the ``DATABASE`` and ``INSTALLED_APPS`` sections
so that it looks like the code below. Do not change any other bits of it
at this time.

.. sourcecode:: python

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': '/home/<my name>/<my_test_project>/db.sqlite',
            'USER': '',
            'PASSWORD': '',
            'HOST': '',
            'PORT': ''
        }
    }

...

.. sourcecode:: python

    INSTALLED_APPS = (
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.sites',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        # Uncomment the next line to enable the admin:
        'django.contrib.admin',
        # Uncomment the next line to enable admin documentation:
        # 'django.contrib.admindocs',
        'mysite.myapp`,
    )

(Replace ``mysite.myapp`` with ``your-project-name.your-app-name`` if neccesary.)

Now that you have told Django what database to use you have to run a management
command in order for it to create the initial tables and the first admin user.
Go back to your Bash console and enter the following commands:

::

    cd <your project name>
    ./manage.py syncdb

You will be asked a series of questions. You should enter a username, email
address, and password for the first admin user. You will need this information
to log in to Django's admin interface so make sure that you remember the details
somehow.


Defining your urls
---------------------------------------------------------------------------------

The next step is defining the urls for your application. This means you are
starting to tell Django what to do when a user visits a certain location in your
web site. The file to edit is called ``urls.py`` and it should be in the same
directory as your ``settings.py`` file.

Open it up and make it look like the file below - you'll need to uncomment 3
lines to do with admin, fix the first url line, and uncomment the last couple
of lines to enable static files.

Remember, as always, that each time you see ``mysite`` or ``myapp``, you
should replace them with your project name or app name, if necessary.

.. sourcecode:: python

    from django.conf.urls.defaults import patterns, include, url
    from django.contrib.staticfiles.urls import staticfiles_urlpatterns

    # Uncomment the next two lines to enable the admin:
    from django.contrib import admin
    admin.autodiscover()

    urlpatterns = patterns('',
        # Examples:
        url(r'^$', 'mysite.myapp.views.home', name='home'),
        # url(r'^foo/', include('mysite.foo.urls')),

        # Uncomment the admin/doc line below to enable admin documentation:
        # url(r'^admin/doc/', include('django.contrib.admindocs.urls')),

        # Uncomment the next line to enable the admin:
        url(r'^admin/', include(admin.site.urls)),
    )

    # Uncomment these two lines to enable your static files on PythonAnywhere
    from django.contrib.staticfiles.urls import staticfiles_urlpatterns
    urlpatterns += staticfiles_urlpatterns()


In this file you are defining two url patterns. The first one matches a blank
string which is what happens when a user visits the <your username>.pythonanywhere.com.

The second one matches "admin/" which is Djangos default admin interface, which
should now be working. You can check that now if you like.  First go to the
**Web** tab and click the **Reload web app** button to activate your changes.
Then, visit:

http://your-username.pythonanywhere.com/admin/

(don't forget the ``/admin/`` at the end of the URL!)

You should be able to log in with the username and password that you provided
earlier. When you are done come back here to continue.

If you get an error rather than the admin interface then go back through each of
these steps and check that everything is exactly like the examples. You also
might want to check the error logs, available from the web tab, and see if they
can give you additional clues about where the the mistake might be.


Creating a template
---------------------------------------------------------------------------------

.. image:: static/django/new_folder_for_templates.png

Now that you have a working admin interface it is time to create a template.

Go to the **Files** tab and create a directory for your template inside your
app folder - Inside ``mysite``, go to ``myapp``,
then enter **templates** as the new directory name

Now create a new file inside the templates folder called ``home.html``,
and make it look like this.

.. sourcecode:: html+django

    <html>
    <head>
        <title>My Python Anywhere hosted Django app</title>
    </head>
    <body>
        <h1>My Python Anywhere hosted Django app</h1>
        <p>Well, since it's already {{ right_now.minute }} past {{ right_now.hour }} UTC,
        that is as far as we are going to take you in this tutorial.</p>
        <p>What you do next is up to you...</p>
    </body>
    </html>

The values inside the ``{{ }}`` are going to be replaced by dynamic content when
we complete our final task. Which is writing a view.


Writing the first view
---------------------------------------------------------------------------------

Views are Django functions which take a request and return a response. We are
going to write a very simple view called home which uses the ``home.html`` template
and uses the datetime module to tell us what the time is whenever the page is
refreshed. The file we need to edit is called ``views.py`` and it will be inside
``mysite/myapp/``

Copy the code below into it and save the file.


.. sourcecode:: python

    from datetime import datetime

    from django.shortcuts import render

    def home(request):
        return render(request, 'home.html', {'right_now':datetime.utcnow()})

The last step is reloading your web app so that the changes are noticed by the
web server. Go and do that now, back in the **Web** tab with the big
**Reload Web App** button.

If you have followed along with this tutorial you should now have a working,
dynamic page at <your username>.pythonanywhere.com.

You can continue to experiment with this by changing the view and the template a
s well as read through the full Django documentation https://docs.djangoproject.com
to see what else is possible.

But for now, that's the end of the tutorial.  Happy coding!



Existing apps / manual config
=================================================================================

If you already have a web app, the idea is that it should be just as easy to
host your project on PythonAnywhere, as it is to host in on your own PC using
the Django dev server.

There's just a couple of subtleties:

    1. adding the right path to ``sys.path`` in ``wsgi.py``
    2. setting up your database in ``settings.py`` - you'll need the full path for sqlite
    3. using ``staticfiles_urlpatterns`` in ``urls.py`` to serve static media.


Note down the path to your project's *parent* folder and the project name
---------------------------------------------------------------------------------

There are several ways you might have got a Django project into PythonAnywhere -
maybe you started one from scratch using ``django-admin.py startproject``.  Maybe
you pulled it in from GitHub or another code sharing site using ``git`` or a similar
VCS tool.  Maybe it's in your Dropbox!

Either way, the thing to do is make a note of the path to **parent folder of
the project root**. The project root is the folder which contains ``settings.py``;
for example, let's say it's ``/home/my_username/projects/my_project/``

In this case, you want to make a note of the path to the project's parent folder

    * ``/home/my_username/projects``

You also need to make a note of the **name of the project root folder** in this case:

    * ``my_project``

Those two together should add up to the full path to the project root. Crystal-clear?


Edit the wsgi file
---------------------------------------------------------------------------------

Go to your PythonAnywhere *Dashboard* and click on the *Web* tab, then click on
the button for **Existing Apps & Other frameworks**, and click the
**Edit WSGI file** button.

Delete the contents and replace them with the below, replacing
``/home/my_username/projects`` with the path to the parent folder of your project,
which you noted down earlier, and ``my_project`` with your project name.

.. sourcecode:: python

    # +++++++++++ DJANGO +++++++++++
    import os
    import sys

    ## assuming your Django settings file is at '/home/my_username/projects/my_project/settings.py'
    path = '/home/my_username/projects'
    if path not in sys.path:
        sys.path.append(path)

    os.environ['DJANGO_SETTINGS_MODULE'] = 'my_project.settings'

    import django.core.handlers.wsgi
    application = django.core.handlers.wsgi.WSGIHandler()

Your Django app should now work, and you can visit at
http://my_username.pythonanywhere.com

If you have any problems, it may be to do with the ``sys.path``, and how it
interacts with ``import`` statements. We've assumed that all your project
imports look like:

.. sourcecode:: python

    from my_project.myapp.models import Kitchen, Sink

If instead you've used:

.. sourcecode:: python

    from myapp.models import Kitchen, Sink

You may need to fully specify the ``my_project.``

Setup the database in settings.py, and syncdb
---------------------------------------------------------------------------------

You need to make sure of three things:

    * if using *sqlite*, you must have the full path to your database

    * if using *MySql*, you'll need the database name, password, and host
      (``mysql.server`` if you're using our MySQL service)

    * finally, make sure all your apps are in INSTALLED_APPS

.. sourcecode:: python

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': '/home/my_username/my_test_project/db.sqlite', # absolute location is required
            'USER': '',
            'PASSWORD': '',
            'HOST': '',
            'PORT': ''
        }
    }

    INSTALLED_APPS = (
        #[...]
        'django.contrib.admin',
        'my_test_project.my_app',
    )


Now open up a **Bash console** to perform the initial database creation

::

    cd <your project name>
    ./manage.py syncdb

Follow the usual prompts to create an admin user and password.


Editing urls.py to serve static files
---------------------------------------------------------------------------------

Next you will need to edit the ``urls.py``.  Uncomment the admin lines if you need
to, but most importantly *use* ``staticfiles_urlpatterns`` *to serve static pages*.


.. sourcecode:: python

    from django.conf.urls.defaults import patterns, include, url

    from django.contrib import admin
    admin.autodiscover()

    urlpatterns = patterns('',
        # [EG] url(r'^<my project name>/', include('<my project name>.foo.urls')),
        url(r'^admin/', include(admin.site.urls)),
    )
    # This is needed to serve static files like images and css
    from django.contrib.staticfiles.urls import staticfiles_urlpatterns
    urlpatterns += staticfiles_urlpatterns()


Reload the web server and enjoy!
---------------------------------------------------------------------------------

Now you just need to reload the web server so that it notices the changes you
have made. Visit the Web tab on the Python Anywhere dashboard and click the
"Reload web app" button. That's it. At this stage you have a working admin
interface and can visit it at
http://my_username.pythonanywhere.com/admin.

