=================================================================================
Creating a new Django project on Python Anywhere
=================================================================================

So you want to create a web application but you don't really want to do all the 
faffing around that is involved in setting up and configuring web servers?

Well that is one of the reasons we created Python Anywhere. This tutorial will
take you through the process of creating a working Django site with an admin 
interface and a front page that tells you the time.  

To follow along with this tutorial you will need a 
`Python Anywhere <http://www.pythonanywhere.com/>`_
account. Go and sign up if you don't already have one then come back here. 

.. contents:: Table of Contents 






The really quick start guide, for experienced Django users
=================================================================================

The idea is that it should be just as easy to host your project on PythonAnywhere, as
it is to host in on your own PC using the Django dev server.

There's just a couple of subtleties:

    1. adding the right path to ``sys.path`` in ``wsgi.py``
    2. setting up your database in ``settings.py`` - you'll need the full path for sqlite
    3. using ``staticfiles_urlpatterns`` in ``urls.py`` to serve static media.

If you're only just starting out with Django, you probably just want to skim through this
stuff, don't worry if you don't understand it, and move onto the more detailed guide.
All will become clear!


Note down the path to your project's *parent* folder and the project name
---------------------------------------------------------------------------------

There are several ways you might have got a Django project into PythonAnywhere - 
maybe you started one from scratch using ``django-admin.py startproject``.  Maybe
you pulled it in from GitHub or another code sharing site using ``git`` or a similar
VCS tool.  Maybe it's in your Dropbox!

Either way, the thing to do is make a note of the path to **parent folder of
the project root**. The project root is the folder which contains ``settings.py``;
for example, let's say it's ``/home/my_username/projects/my_project/``

In this case, you want to make a note of the path to the project's parent folder

    * ``/home/my_username/projects``

You also need to make a note of the **name of the project root folder** in this case:

    * ``my_project``

Those two together should add up to the full path to the project root. Crystal-clear?


Edit the wsgi file
---------------------------------------------------------------------------------

Go to your PythonAnywhere *Dashboard* and click on the *Web* tab, then click on
the link to **edit your WSGI file**.

Delete the contents and replace them with the below, replacing
``/home/my_username/projects`` with the path to the parent folder of your project,
which you noted down earlier, and ``my_project`` with your project name.

.. sourcecode:: python

    # +++++++++++ DJANGO +++++++++++
    import os
    import sys
    
    ## assuming your Django settings file is at '/home/my_username/projects/my_project/settings.py'
    path = '/home/my_username/projects'
    if path not in sys.path:
        sys.path.append(path)
    
    os.environ['DJANGO_SETTINGS_MODULE'] = 'my_project.settings'
    
    import django.core.handlers.wsgi
    application = django.core.handlers.wsgi.WSGIHandler()

You should now have a default Django app which you can visit at
http://my_username.pythonanywhere.com

If you have any problems, it may be to do with the ``sys.path``, and how it 
interacts with ``import`` statements. We've assumed that all your project
imports look like:

.. sourcecode:: python

    from my_project.myapp.models import Kitchen, Sink

If instead you've used:

.. sourcecode:: python

    from myapp.models import Kitchen, Sink

You may need to fully specify the ``my_project.``


Setup the database in settings.py, and syncdb
---------------------------------------------------------------------------------

You need to make sure of three things:

    * if using *sqlite*, you must have the full path to your database

    * if using *MySql*, you'll need the database name, password, and host 
      (``mysql.server`` if you're using our MySQL service)

    * finally, make sure all your apps are in INSTALLED_APPS

.. sourcecode:: python
    
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': '/home/my_username/my_test_project/db.sqlite', # absolute location is required
            'USER': '',
            'PASSWORD': '',
            'HOST': '',
            'PORT': ''
        }
    }
    
    INSTALLED_APPS = (
        #[...]
        'django.contrib.admin',
        'my_test_project.my_app',
    )
 

Now open up a **Bash console** to perform the initial database creation

::

    cd <your project name>
    ./manage.py syncdb

Follow the usual prompts to create an admin user and password.


Editing urls.py to serve static files
---------------------------------------------------------------------------------

Next you will need to edit the ``urls.py``.  Uncomment the admin lines if you need
to, but most importantly *use* ``staticfiles_urlpatterns`` *to serve static pages*.


.. sourcecode:: python

    from django.conf.urls.defaults import patterns, include, url

    from django.contrib import admin
    admin.autodiscover()
    
    urlpatterns = patterns('',
        # [EG] url(r'^<my project name>/', include('<my project name>.foo.urls')),
        url(r'^admin/', include(admin.site.urls)),
    )
    # This is needed to serve static files like images and css
    from django.contrib.staticfiles.urls import staticfiles_urlpatterns
    urlpatterns += staticfiles_urlpatterns()


Reload the web server and enjoy!
---------------------------------------------------------------------------------

Now you just need to reload the web server so that it notices the changes you 
have made. Visit the Web tab on the Python Anywhere dashboard and click the 
"Reload web app" button. That's it. At this stage you have a working admin
interface and can visit it at 
http://my_username.pythonanywhere.com/admin. 



The gruesome details for beginners
=================================================================================

The main web tab at Python Anywhere looks like this:

.. image:: http://tutorial.pythonanywhere.com/static/django/pa_web_dashboard.jpg

To edit your ``wsgi.py`` file you click the link titled "this WSGI file". Every 
time you make a change to the files on the Python Anywhere servers you need to 
click the "Reload web app" button at the bottom of the page. This reloads the 
web server so that it notices the changes you have made. 

You can also follow the links through to your error and access logs. These are 
very handy for figuring out why the code you have written might not be working
or seeing who has been visiting your respectively. If your web app is giving 
a message like ``500 internal server error`` then you should visit your error log
and see the actual error message that your code is generating. 

The WSGI file here is how you tell Python Anywhere what application you actually
want to run. Any WSGI web framework can be used but in this tutorial we will only
be focusing on Django. 


Starting a new Django project
---------------------------------------------------------------------------------

Django is already installed on Python Anywhere so you it is easy to get started. 


.. image:: http://tutorial.pythonanywhere.com/static/django/pa_console_dashboard.jpg

The first commands need to be run inside a bash console. You will need to go to 
the **Consoles** tab of Python Anywhere and click on the link highlighted in red 
here to create a new bash console. 

You will then need to type the following at 
the console prompt. 

Throughout this tutorial there will be terms surrounded by 
angle brackets <like this>. This means that you should replace the contents, 
including the angle brackets with your own name for the project and application
that you are creating. So for example the first command below might actually 
look like this: 

"django-admin.py startproject blog". 

Remember this convention because if you just copy and paste the example commands
they won't work and you will receive errors rather than the expected results. 

So, enter the code below into a bash console:

:: 

 django-admin.py startproject <my project name>
 cd <my project name>
 python manage.py startapp <my app name>

Below is a an example of what your console should look like after you have done 
this.

.. image:: http://tutorial.pythonanywhere.com/static/django/pa_console_django_start.jpg

Your next step is to edit the ``wsgi.py`` file which is located at ``/var/www/wsgi.py``.


Editing your wsgi.py file
---------------------------------------------------------------------------------

The ``wsgi.py`` file is a Python Anywhere specific Python script and cannot be moved
or renamed. You can find a direct link to it on the **Web** tab of the dashboard. 
Go there now and edit the file so that it matches the one below. Making sure to 
replace the <my name> amd <my project name> with the your username and the 
project name that you chose in the previous step. 


.. sourcecode:: python

    # +++++++++++ DJANGO +++++++++++
    import os
    import sys
    
    ## assuming your Django settings file is at '/home/<my name>/<my project name>/settings.py'
    path = '/home/<my name>/'
    if path not in sys.path:
        sys.path.append(path)
    
    os.environ['DJANGO_SETTINGS_MODULE'] = '<my project name>.settings'
    
    import django.core.handlers.wsgi
    application = django.core.handlers.wsgi.WSGIHandler()


At this point you have a very basic default Django app running. You should visit
it to make sure that this is the case. Every Python Anywhere user has a default 
place to visit their web app. It is <my username>.pythonanywhere.com. This 
tutorial is in fact being delivered to you by a Django app run by the user 
"tutorial". If your username was harry you would access your app at 
http://harry.pythonanywhere.com. You can find a link to your own address at the 
Web tab in the dashboard. Try going their now and checking that you can see the 
default welcome message from Django then come back here to continue. 


Configuring the database and enabling the admin interface
---------------------------------------------------------------------------------

Django needs a database connection to do pretty much anything. Python Anywhere 
provides support for MySQL databases but for now we will just use sqlite3. A file
based database that does not require setting up a database account and password.

The file that contains all the settings information for Django is called, 
naturally enough, ``settings.py``. By default it lives in your Django project 
directory. You will need to open this file up and change the DATABASE and 
INSTALLED_APPS sections of it so that it looks like the code below. Do not change 
any other bits of it at this time. 

.. sourcecode:: python
    
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': '/home/%s/<my_test_project>/db.sqlite',
            'USER': '',
            'PASSWORD': '',
            'HOST': '',
            'PORT': ''
        }
    }
    
    INSTALLED_APPS += (
        'django.contrib.admin',
        '<my project name>.<my app name>',
    )

Now that you have told Django what database to use you have to run a management 
command in order for it to create the initial tables and the first admin user. 
In order to do this you go back to a bash shell and enter the following commands

::

    cd <your project name>
    ./manage.py syncdb

You will be asked a series of questions. You should enter a username, email 
address, and password for the first admin user. You will need this information 
to log in to Django's admin interface so make sure that you remember the details 
somehow.


Defining your urls
---------------------------------------------------------------------------------

The next step is defining the urls for your application. This means you are
starting to tell Django what to do when a user visits a certain location in your 
web site. The file to edit is called ``urls.py`` and it should be in the same
directory as your ``settings.py`` file. Open it up and make it look like the file
below. Remember, as always, that each time you see a phrase inside angle 
brackets you need to replace it with the project and app name that you have 
chosen.

.. sourcecode:: python

    from django.conf.urls.defaults import patterns, include, url
    from django.contrib.staticfiles.urls import staticfiles_urlpatterns
    
    # Uncomment the next two lines to enable the admin:
    from django.contrib import admin
    admin.autodiscover()
    
    urlpatterns = patterns('',
        # Examples:
        url(r'^$', '<my project name>.<my app name>.views.home', name='home'),
        # url(r'^<my project name>/', include('<my project name>.foo.urls')),
    
        # Uncomment the admin/doc line below to enable admin documentation:
        # url(r'^admin/doc/', include('django.contrib.admindocs.urls')),
    
        # Uncomment the next line to enable the admin:
        url(r'^admin/', include(admin.site.urls)),
    )
    # This is needed to serve static files like images and css
    urlpatterns += staticfiles_urlpatterns()

In this file you are defining two url patterns. The first one matches a blank 
string which is what happens when a user visits the <your username>.pythonanywhere.com. 
The second one matches "admin/" which is Djangos default admin interface. This
should now be working. If you like you can take a look at it now, logging in with
the username and password that you provided earlier. When you are done come back 
here to continue. You may need to press the **Reload web app** button on your on 
the web tab before theses changes will be recognised. Do that if it doesn't work
the first time you visit it. 

If you get an error rather than the admin interface then go back through each of
these steps and check that everything is exactly like the examples. You also
might want to check the error logs, available from the web tab, and see if they
can give you additional clues about where the the mistake might be. 

Creating a template
---------------------------------------------------------------------------------

Now that you have a working admin interface it is time to create a template. 

Go back to your bash console and create a directory for your template and an 
empty template file using the commands below.

::

    mkdir <my project name>/templates
    touch <my project name>/templates/home.html

Now go back to your files and edit the ``home.html`` template file so that it looks
like this.

.. sourcecode:: html+django

    <html>
    <head>
        <title>My Python Anywhere hosted Django app</title>
    </head>
    <body>
        <h1>My Python Anywhere hosted Django app</h1>
        <p>Well, since it's already {{ right_now.minute }} past {{ right_now.hour }} UTC,
        that is as far as we are going to take you in this tutorial.</p>
        <p>What you do next is up to you...</p>
    </body>
    </html>

The values inside the ``{{ }}`` are going to be replaced by dynamic content when 
we complete our final task. Which is writing a view. 


Writing the first view
---------------------------------------------------------------------------------

Views are Django functions which take a request and return a response. We are
going to write a very simple view called home which uses the ``home.html`` template
and uses the datetime module to tell us what the time is whenever the page is
refreshed. The file we need to edit is called ``views.py`` and it will be inside 
the <my app name> folder inside the directory containing settings.py. 

Copy the code below into it and save the file. 


.. sourcecode:: python

    from datetime import datetime
    
    from django.shortcuts import render
    
    def home(request):
        return render(request, 'home.html', {'right_now':datetime.utcnow()})

The last step is reloading your web app so that the changes are noticed by the
web server. Go and do that now. 

If you have followed along with this tutorial you should now have a working,
dynamic page at <your username>.pythonanywhere.com. You can continue to 
experiment with this by changing the view and the template as well as read 
through the full Django documentation https://docs.djangoproject.com to see what 
else is possible.



